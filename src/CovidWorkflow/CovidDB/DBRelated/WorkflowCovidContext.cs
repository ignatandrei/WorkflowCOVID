using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace CovidDB.ModelsSqlServer
{
    /// <summary>
    /// Scaffold-DbContext 'Data Source=.;Initial Catalog=WorkflowCovid;UID=sa;PWD=<YourStrong@Passw0rd>' Microsoft.EntityFrameworkCore.SqlServer -OutputDir ModelsSqlServer            
    /// </summary>
    /// <seealso cref="Microsoft.EntityFrameworkCore.DbContext" />
    public partial class WorkflowCovidContext
    {
        public void CreateDB()
        {
            this.Database.EnsureDeleted();
            this.Database.EnsureCreated();
            this.Anamnesis.AddRange(
                ModelsSqlServer.Anamnesis.Create(
                    "Istoric fumat", "Nr PA", "medicatie personala",
                    "Obezitate",
"IMC",
"HTA",
"Diabet zaharat",
"Link epidemiologic",
"Contact COVID",
"Cu cine a avut contact",
"Expunere la noxe",
"Ce expunere",
"Alte APP",
"Febra",
"Temperatura",
"Dispnee",
"mMRC",
"Tuse",
"Anosmie",
"Fatigabilitate",
"Scaderea apetitului",
"Cefalee",
"Angina faringiana",
"Frison",
"Rinoree",
"Greata",
"Varsaturi",
"Diaree",
"Scaune diareice",
"Name",
"Debutul simptomelor"

                   )
                );

            this.CovidStatus.Add(new CovidStatus()
            {
                Name = "Suspect",
            });
            this.CovidStatus.Add(new CovidStatus()
            {
                Name = "Confirmat",
            });

            this.Location.AddRange(ModelsSqlServer.Location.Create("SpitalizareZi", "Spitalizare", "Acasa", "Iesit Evidenta"));

            this.MedicalTests.AddRange(ModelsSqlServer.MedicalTests.Create("HLG", "VSH", "PROT C"));
            this.SaveChanges();

        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder)
        {
            //just for see that this partial works

        }
        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            var auditEntries = OnBeforeSaveChanges();
            var result= base.SaveChanges(acceptAllChangesOnSuccess);
            if(OnAfterSaveChanges(auditEntries))
                base.SaveChanges();
            return result;
        }
        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
        {

            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            if( OnAfterSaveChanges(auditEntries))
                await base.SaveChangesAsync();
            return result;

        }
        private List<AuditEntry> OnBeforeSaveChanges()
        {
            var dateTimeModified = DateTime.UtcNow;
            var g = Guid.NewGuid();
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                    continue;
                
                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.GetTableName();
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                var entry = auditEntry.ToAudit();
                entry.DateTimeModified = dateTimeModified;
                entry.CorrelationId = g;

                Audit.Add(entry);
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private bool OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return false;
            
            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                Audit.Add(auditEntry.ToAudit());
            }

            return true;
        }
    }
}
